{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/mock.service\";\nimport * as i3 from \"@angular/common\";\nfunction MockFormComponent_p_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.isEditMode ? \"Mock actualizado\" : \"Mock creado\", \" exitosamente \\u2705 \");\n  }\n}\nexport let MockFormComponent = /*#__PURE__*/(() => {\n  class MockFormComponent {\n    fb;\n    mockService;\n    mock; // recibe un mock cuando se quiere editar\n    mockForm;\n    isEditMode = false;\n    success = false;\n    constructor(fb, mockService) {\n      this.fb = fb;\n      this.mockService = mockService;\n      this.mockForm = this.fb.group({\n        route: ['', Validators.required],\n        response: ['', Validators.required]\n      });\n    }\n    ngOnChanges(changes) {\n      if (changes['mock'] && this.mock) {\n        this.isEditMode = true;\n        this.mockForm.patchValue({\n          route: this.mock.route,\n          response: JSON.stringify(this.mock.response, null, 2)\n        });\n      }\n    }\n    onSubmit() {\n      const raw = this.mockForm.value;\n      try {\n        const payload = {\n          route: raw.route,\n          response: JSON.parse(raw.response)\n        };\n        if (this.isEditMode && this.mock._id) {\n          this.mockService.updateMock(this.mock._id, payload).subscribe(() => {\n            this.success = true;\n          });\n        } else {\n          this.mockService.createMock(payload).subscribe(() => {\n            this.success = true;\n            this.mockForm.reset();\n          });\n        }\n      } catch (e) {\n        alert(\"Respuesta no es un JSON válido.\");\n      }\n    }\n    static ɵfac = function MockFormComponent_Factory(t) {\n      return new (t || MockFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.MockService));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: MockFormComponent,\n      selectors: [[\"app-mock-form\"]],\n      inputs: {\n        mock: \"mock\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature],\n      decls: 14,\n      vars: 6,\n      consts: [[3, \"ngSubmit\", \"formGroup\"], [\"type\", \"text\", \"formControlName\", \"route\", 3, \"readonly\"], [\"formControlName\", \"response\", \"rows\", \"6\"], [\"type\", \"submit\", 3, \"disabled\"], [\"style\", \"color:green;\", 4, \"ngIf\"], [2, \"color\", \"green\"]],\n      template: function MockFormComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h2\");\n          i0.ɵɵtext(1);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"form\", 0);\n          i0.ɵɵlistener(\"ngSubmit\", function MockFormComponent_Template_form_ngSubmit_2_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(3, \"label\");\n          i0.ɵɵtext(4, \"Ruta:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(5, \"input\", 1)(6, \"br\");\n          i0.ɵɵelementStart(7, \"label\");\n          i0.ɵɵtext(8, \"Respuesta JSON:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(9, \"textarea\", 2)(10, \"br\");\n          i0.ɵɵelementStart(11, \"button\", 3);\n          i0.ɵɵtext(12);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(13, MockFormComponent_p_13_Template, 2, 1, \"p\", 4);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate(ctx.isEditMode ? \"Editar Mock\" : \"Crear nuevo Mock\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"formGroup\", ctx.mockForm);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"readonly\", ctx.isEditMode);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"disabled\", ctx.mockForm.invalid);\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate1(\" \", ctx.isEditMode ? \"Actualizar\" : \"Guardar\", \" \");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.success);\n        }\n      },\n      dependencies: [i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n      encapsulation: 2\n    });\n  }\n  return MockFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}